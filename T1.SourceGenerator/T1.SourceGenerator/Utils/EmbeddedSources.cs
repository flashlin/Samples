using System.Reflection;
using System.Text;

namespace T1.SourceGenerator.Utils;

public class EmbeddedSources
{
	private readonly string _autoGeneratedHeader;
	private readonly Assembly _thisAssembly;

	public EmbeddedSources(Assembly thisAssembly)
	{
		_thisAssembly = thisAssembly;
		_autoGeneratedHeader = LoadEmbeddedResource("T1.SourceGenerator.Templates.AutoGeneratedHeader.cs");
	}


	public string LoadTemplate(string resourceName)
	{
		var template = LoadEmbeddedResource($"T1.SourceGenerator.Templates.{resourceName}.cs");
		return template.Replace("internal partial class", "public partial class");
	}

	public string LoadTemplateForEmitting(string resourceName)
	{
		var resource = LoadTemplate(resourceName);
		return _autoGeneratedHeader + @"#if AUTO_MAPPING_EMBED_ATTRIBUTES
" + resource
					  .Replace("public sealed", "internal sealed")
					  .Replace("public enum", "internal enum")
				 + @"
#endif";
	}

	private string LoadEmbeddedResource(string resourceName)
	{
		var resourceStream = _thisAssembly.GetManifestResourceStream(resourceName);
		if (resourceStream is null)
		{
			var existingResources = _thisAssembly.GetManifestResourceNames();
			throw new ArgumentException($"Could not find embedded resource {resourceName}. Available names: {string.Join(", ", existingResources)}");
		}

		using var reader = new StreamReader(resourceStream, Encoding.UTF8);
		return reader.ReadToEnd();
	}
}