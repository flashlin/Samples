using System.Reflection;
using System.Text;

namespace T1.SourceGenerator.Utils;

public class EmbeddedSources
{
    private readonly Assembly _thisAssembly;
    private readonly string _autoGeneratedHeader;

    public EmbeddedSources(Assembly thisAssembly)
    {
        _thisAssembly = thisAssembly;
        _autoGeneratedHeader = LoadEmbeddedResource("T1.SourceGenerator.Templates.AutoGeneratedHeader.cs");
    }

    private string LoadEmbeddedResource(string resourceName)
    {
        var resourceStream = _thisAssembly.GetManifestResourceStream(resourceName);
        if (resourceStream is null)
        {
            var existingResources = _thisAssembly.GetManifestResourceNames();
            throw new ArgumentException($"Could not find embedded resource {resourceName}. Available names: {string.Join(", ", existingResources)}");
        }

        using var reader = new StreamReader(resourceStream, Encoding.UTF8);
        return reader.ReadToEnd();
    }

    public string LoadTemplateForEmitting(string resourceName)
    {
        var resource = LoadEmbeddedResource($"T1.SourceGenerator.Templates.{resourceName}.cs");
        return _autoGeneratedHeader + @"#if AUTO_MAPPING_EMBED_ATTRIBUTES
" + resource
                   .Replace("public sealed", "internal sealed")
                   .Replace("public enum", "internal enum")
               + @"
#endif";
    }
}