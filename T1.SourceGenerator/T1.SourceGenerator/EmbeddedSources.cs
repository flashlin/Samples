using System.Reflection;
using System.Text;

namespace T1.SourceGenerator;

internal static class EmbeddedSources
{
    private static readonly Assembly ThisAssembly = typeof(EmbeddedSources).Assembly;
    internal static readonly string AutoMappingAttributeSource = LoadTemplateForEmitting("AutoMappingAttribute");

    private static readonly string AutoGeneratedHeader = LoadEmbeddedResource("T1.SourceGenerator.Templates.AutoGeneratedHeader.cs");

    internal static string LoadEmbeddedResource(string resourceName)
    {
        var resourceStream = ThisAssembly.GetManifestResourceStream(resourceName);
        if (resourceStream is null)
        {
            var existingResources = ThisAssembly.GetManifestResourceNames();
            throw new ArgumentException($"Could not find embedded resource {resourceName}. Available names: {string.Join(", ", existingResources)}");
        }

        using var reader = new StreamReader(resourceStream, Encoding.UTF8);
        return reader.ReadToEnd();
    }

    internal static string LoadTemplateForEmitting(string resourceName)
    {
        var resource = LoadEmbeddedResource($"T1.SourceGenerator.Templates.{resourceName}.cs");
        return AutoGeneratedHeader + @"#if AUTO_MAPPING_EMBED_ATTRIBUTES
" + resource
                   .Replace("public sealed", "internal sealed")
                   .Replace("public enum", "internal enum")
               + @"
#endif";
    }
}