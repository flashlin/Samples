//<auto-generated>
using System.Text;
using System.Text.Json;

namespace T1.SourceGenerator;

internal partial class WebApiClient
{
    private HttpClient _httpClient;

    public WebApiClient(IHttpClientFactory httpClientFactory)
    {
        InitHttp(httpClientFactory);
    }

    public TimeSpan Timeout { get; set; } = TimeSpan.FromSeconds(30);

    //<generate code: properties/>

    public string BaseUrl { get; set; }

    public async Task<TResp?> PostDataAsync<TResp>(string apiPath, object? data = null)
    {
        var response = await InternalPostDataAsync(apiPath, data);
        var result = await response.Content.ReadAsStringAsync();
        return Deserialize<TResp>(result);
    }

    public async Task PostVoidAsync(string apiPath, object? data = null)
    {
        await InternalPostDataAsync(apiPath, data);
    }

    protected async Task<HttpResponseMessage> InternalPostDataAsync(string apiPath, object? data = null)
    {
        var requestUri = new Uri(BaseUrl + apiPath);
        _httpClient.Timeout = Timeout;
        var response = await _httpClient.PostAsync(requestUri, ToJsonContent(data));
        response.EnsureSuccessStatusCode();
        return response;
    }

    protected virtual string SerializeObject(object obj)
    {
        return JsonSerializer.Serialize(obj);
    }

    protected virtual T? Deserialize<T>(string json)
    {
        return JsonSerializer.Deserialize<T>(json);
    }

    protected virtual void InitHttp(IHttpClientFactory httpClientFactory)
    {
        _httpClient = httpClientFactory.CreateClient();
    }
    
    private StringContent ToJsonContent(object? data)
    {
        return new StringContent(ToJsonStr(data), Encoding.UTF8, "application/json");
    }

    private string ToJsonStr(object? data)
    {
        var requestJson = "{}";
        if (data != null) requestJson = SerializeObject(data);
        return requestJson;
    }
}