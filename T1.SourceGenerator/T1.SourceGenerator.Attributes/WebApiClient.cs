//<auto-generated>
using System.Text;
using System.Text.Json;
using System.Web;

namespace T1.SourceGenerator;

internal partial class WebApiClient
{
    private HttpClient _httpClient;
    //<generate code: fields/>

    public WebApiClient(
        IHttpClientFactory httpClientFactory//<generate code: ctor/>
        )
    {
        _httpClient = httpClientFactory.CreateClient();
        //<generate code: initialize/>
        Initialize();
    }

    partial void Initialize();

    //<generate code: properties/>

    public string BaseUrl { get; set; } = string.Empty;

    public async Task<TResp?> PostDataAsync<TResp>(string apiPath, 
        object? data = null,
        TimeSpan? timeout = null)
    {
        var response = await InternalPostDataAsync(apiPath, data, timeout);
        var result = await response.Content.ReadAsStringAsync();
        return Deserialize<TResp>(result);
    }

    public async Task PostVoidAsync(
        string apiPath, 
        object? data = null,
        TimeSpan? timeout = null)
    {
        await InternalPostDataAsync(apiPath, data, timeout);
    }
    
    public async Task<TResp?> GetDataAsync<TResp>(string apiPath, 
        object? data = null,
        TimeSpan? timeout = null)
    {
        var response = await InternalGetDataAsync(apiPath, data, timeout);
        var result = await response.Content.ReadAsStringAsync();
        return Deserialize<TResp>(result);
    }

    public async Task GetVoidAsync(string apiPath, 
        object? data = null,
        TimeSpan? timeout = null)
    {
        await InternalGetDataAsync(apiPath, data, timeout);
    }

    protected async Task<HttpResponseMessage> InternalPostDataAsync(string apiPath, 
        object? data = null, 
        TimeSpan? timeout = null)
    {
        var requestUri = new Uri(BaseUrl + apiPath);
        timeout = timeout ?? TimeSpan.FromSeconds(30);
        _httpClient.Timeout = timeout.Value;
        var response = await _httpClient.PostAsync(requestUri, ToJsonContent(data));
        response.EnsureSuccessStatusCode();
        return response;
    }

    protected async Task<HttpResponseMessage> InternalGetDataAsync(string apiPath, 
        object? data = null,
        TimeSpan? timeout = null)
    {
        var requestUri = new Uri(BaseUrl + apiPath);
        timeout = timeout ?? TimeSpan.FromSeconds(30);
        _httpClient.Timeout = timeout.Value;
        var response = await _httpClient.GetAsync(requestUri + ToQueryString(data), HttpCompletionOption.ResponseHeadersRead);
        response.EnsureSuccessStatusCode();
        return response;
    }

    protected virtual string ToQueryString(object? data)
    {
        if (data == null)
        {
            return string.Empty;
        }
        var dict = JsonSerializer.Deserialize<Dictionary<string, string>>(JsonSerializer.Serialize(data));
        var queryParams = dict.Select(x => HttpUtility.UrlEncode(x.Key) + "=" + HttpUtility.UrlEncode(x.Value));
        return "?" + string.Join("&", queryParams);
    }
    

    protected virtual string SerializeObject(object obj)
    {
        return JsonSerializer.Serialize(obj);
    }

    protected virtual T? Deserialize<T>(string json)
    {
        return JsonSerializer.Deserialize<T>(json);
    }

    private StringContent ToJsonContent(object? data)
    {
        return new StringContent(ToJsonStr(data), Encoding.UTF8, "application/json");
    }

    private string ToJsonStr(object? data)
    {
        var requestJson = "{}";
        if (data != null) requestJson = SerializeObject(data);
        return requestJson;
    }
}