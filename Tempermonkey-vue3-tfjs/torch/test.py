import torch
from torch import nn

from common.io import info
from utils.linq_tokenizr import LINQ_Char2Index_Dict, LINQ_Marks

info(f" {len(LINQ_Char2Index_Dict)=}")
info(f" {len(LINQ_Marks)=}")

# max_size = 297
# embedding = nn.Embedding(max_size + 1, 3, padding_idx=0)
# inputs = torch.tensor([  1, 102, 243, 105,  97, 101,  21,  22,  23,   6,   7,  16,  22,   0,
#         105,  97, 102, 297, 105,  97, 101,  21,  22,  23,   6,   7,  16,  22,
#          21,   0, 105,  97, 102, 221, 105,  97, 101,  21,  22,  23,   6,   7,
#          16,  22,   0, 105,  97, 102, 296, 105,  97, 101,  21,  22,  23,   6,
#           7,  16,  22,   0, 106,  95, 101,  40,   3,  21,  22,  42,   3,  15,
#           7,   0, 105,  97, 102, 244, 105,  97, 102, 282, 101,  35,  20,  17,
#          23,  18,   0, 105,  97, 102, 168, 105,  97, 102, 282, 101,  35,  20,
#          17,  23,  18,   0, 106,  95, 101,  39,   7,  27,   0, 105,  97, 102,
#         192, 105,  97, 102, 282, 106,  81, 101,  13,   7,  27,   0, 107,  67,
#         102, 282, 101,  35,  20,  17,  23,  18,   0, 106,  95, 101,  39,   7,
#          27,   0, 106,  94, 101,  24,   3,  14,  23,   7,  21,   0, 107,  67,
#         102, 282, 101,  35,  20,  17,  23,  18,   0, 106,  95, 102, 169, 106,
#          77, 106,  78, 106,  82, 105,  98,   2,   0,   0,   0,   0,   0,   0,
#           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
#           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
#           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
#           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
#           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
#           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
#           0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0])
# info(f" {inputs.shape=}")
# info(f" {max(inputs)=}")
# assert (inputs <= max_size).all(), "target: {} invalid".format(inputs)
# t = embedding(inputs) #.view(1, 1, -1)
# info(f" {t=}")
