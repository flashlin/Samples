@page "/queryForm"
<PageTitle>Query</PageTitle>

<Modal IsShow="false">
    <Body>
    <MergeTableForm></MergeTableForm>
    </Body>
</Modal>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-8">
            <MCodeEditor @ref="_codeEditor"
                         SqlCodeRanCallback="@OnSqlCodeRan" Language="csharp"
                         KeyCallback="@OnCodeEditorKey"/>
        </div>
        <div class="col-md-4">
            <select class="form-select" multiple aria-label="multiple select example"
                    @ref="_sqlCodeHistorySelector"
                    @onchange="HandleSelectionSqlHistoryChange">
                @foreach (var sqlCode in _sqlCodeHistory)
                {
                    <option value="@sqlCode">@sqlCode</option>
                }
            </select>
            <button class="btn btn-primary"></button>
        </div>
    </div>
</div>


@foreach (var result in _results.Select((value, index) => new { value, index }))
{
    <button @onclick="() => CopyCsvToClipboard(result.value)">Copy Result@(result.index) CSV</button>
    <table>
        <tr>
            @foreach (var header in result.value.Headers)
            {
                <td>@header.Name</td>
            }
        </tr>
        @foreach (var row in result.value.Rows)
        {
            <tr>
                @foreach (var column in row.Keys)
                {
                    <td>
                        @row[column]
                    </td>
                }
            </tr>
        }
    </table>
}

@using QueryWeb.Shared
@using QueryKits.Services
@using Prism.Events
@using QueryKits.ExcelUtils
@using QueryWeb.Models
@using T1.Standard.Linq
@inject IJSRuntime _jsRuntime
@inject IEventAggregator EventAggregator
@inject IQueryService QueryService

@code {
    private MCodeEditor _codeEditor = null!;
    private readonly string[] _isShowTabs = { "active", "" };
    private List<string> _sqlCodeHistory = new();
    MCodeEditor _resultEditor = null!;
    private ElementReference _sqlCodeHistorySelector;
    private string _sqlCode = string.Empty;
    private List<ExcelSheet> _results = new();

    private void ClickTab(int index)
    {
        for (var i = 0; i < _isShowTabs.Length; i++)
        {
            _isShowTabs[i] = string.Empty;
            if (i == index)
            {
                _isShowTabs[i] = "active";
            }
        }
        _resultEditor.ForceUpdate();
    }

    private void CopyCsvToClipboard(ExcelSheet sheet)
    {
        _jsRuntime.InvokeVoidAsync("copyTextToClipboard", sheet.ToCsvString());
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _sqlCodeHistory = QueryService.GetTop10SqlCode();
            StateHasChanged();
            try
            {
    //var t = await _jsRuntime.InvokeAsync<string[]>("getDrivesAsync");
            }
            catch (Exception e)
            {
                Console.WriteLine("load wasm fail" + e.Message);
            }
        }
        return Task.CompletedTask;
    }

    private Task OnSqlCodeRan(SqlCodeRunEventArgs arg)
    {
        //StateHasChanged();
        _results = QueryService.QueryRawSql(arg.SqlCode);
        QueryService.AddSqlCode(arg.SqlCode);
        return Task.CompletedTask;
    }

    private Task HandleSelectionSqlHistoryChange(ChangeEventArgs arg)
    {
        var value = (string[])arg.Value!;
        _sqlCode = value[0];
        return Task.CompletedTask;
    }

    private async Task OnCodeEditorKey(KeyEventArgs arg)
    {
        if (arg.KeyCode == KeyCode.KeyI)
        {
            await _codeEditor.InsertAsync(_sqlCode);
        }
    }

}

