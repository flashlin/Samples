@page "/queryForm"
@using QueryRazor

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @_currentCount</p>
<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>


<div class="container-fluid">
    <div class="row">
        <div class="col-md-8">
            <MCodeEditor @ref="_codeEditor" SqlCodeRanCallback="@OnSqlCodeRan" Language="csharp"/>
        </div>
        <div class="col-md-4">
            <select class="form-select" multiple aria-label="multiple select example">
                <option selected>Open this select menu</option>
                @foreach (var sqlCode in _sqlCodeHistory)
                {
                    <option value="@sqlCode">@sqlCode</option>
                }
            </select>
        </div>
    </div>
</div>


<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link" @onclick="() => ClickTab(0)">Result</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active" @onclick="() => ClickTab(1)">Grid</a>
    </li>
</ul>
<div class="tab-content mt-3">
    <div class="tab-pane @_isShowTabs[0]">
        <h3>Result</h3>
        <MCodeEditor @ref="_resultEditor" Language="text"/>
    </div>
    <div class="tab-pane @_isShowTabs[1]">
        <h3>Grid</h3>
        <p>Aliquam id nibh consequat, fringilla mauris nec, pellentesque lectus. Sed sed risus sit amet quam eleifend auctor. Vivamus sed est leo. Suspendisse mollis ex in ante aliquet vestibulum. In mattis purus eu enim venenatis pharetra. Etiam ullamcorper neque ac lacus consectetur lacinia. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Proin eget purus sed dolor tristique pharetra vel id turpis.</p>
    </div>
</div>
@using QueryWeb.Shared
@using QueryKits.Services
@using Prism.Events
@using QueryWeb.Models
@inject IReportRepo _reportRepo
@inject IJSRuntime _jsRuntime
@inject IEventAggregator EventAggregator

@code {
    private MCodeEditor _codeEditor = null!;
    private string[] _isShowTabs = new[] {"active", ""};
    private int _currentCount = 0;
    private List<string> _sqlCodeHistory = new List<string>();
    MCodeEditor _resultEditor = null!;
    
    
    
    private void IncrementCount()
    {
        _currentCount++;
        _isShowTabs[0] = "";
        _isShowTabs[1] = "true";
    }

    private void ClickTab(int index)
    {
        for (var i = 0; i < _isShowTabs.Length; i++)
        {
            _isShowTabs[i] = string.Empty;
            if (i == index)
            {
                _isShowTabs[i] = "active";
            }
        }
        _resultEditor.ForceUpdate();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _sqlCodeHistory = _reportRepo.GetTop10SqlCode();
            StateHasChanged();
            try
            {
    //var t = await _jsRuntime.InvokeAsync<string[]>("getDrivesAsync");
            }
            catch (Exception e)
            {
                Console.WriteLine("load wasm fail" + e.Message);
            }
        }
        return Task.CompletedTask;
    }

    private void OnSqlCodeRan(SqlCodeRunEventArgs arg)
    {
        _reportRepo.AddSqlCode(arg.SqlCode);
        //StateHasChanged();
    }

}