@page "/queryForm"
<PageTitle>Query</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-8">
            <XCodeEditor @ref="_codeEditor"
                         SqlCodeRanCallback="@OnSqlCodeRan"
                         Text="@_codeText"
                         Language="csharp"
                         KeyCallback="@OnCodeEditorKey"/>
        </div>
        <div class="col-md-4">
            <select class="form-select" multiple aria-label="multiple select example"
                    @ref="_sqlCodeHistorySelector"
                    @onchange="HandleSelectionSqlHistoryChange">
                @foreach (var sqlCode in _sqlCodeHistory)
                {
                    <option value="@sqlCode">@sqlCode</option>
                }
            </select>
            <button class="btn btn-primary" @onclick="ConvertText">Convert Text</button>
        </div>
    </div>
</div>

<div>@_resultTime.ToString("yyyy/MM/dd HH:mm:ss,fff")</div>

@foreach (var result in _results)
{
    <XSheetTable Sheet="@result"></XSheetTable>
}

@if (!_results.Any())
{
    <div>No Data</div>
<textarea style="width: 80ch; height: 30ch;">
@_text
</textarea>
}


<Modal IsShow="_isShowMergeTableForm" OnClickClose="OnClickCloseMergeTableForm">
    <Body>
    <MergeTableForm @ref="_mergeTableForm"></MergeTableForm>
    </Body>
</Modal>

<style>
.table-dark tbody tr:nth-of-type(odd) {
    background-color: #f2f2f2;
}    
</style>
@using QueryWeb.Shared
@using QueryKits.Services
@using Prism.Events
@using QueryKits.ExcelUtils
@using QueryWeb.Models
@inject IJSRuntime JsRuntime
@inject IEventAggregator EventAggregator
@inject IQueryService QueryService
@inject IAppState AppState

@code {
    private XCodeEditor _codeEditor = null!;
    private readonly string[] _isShowTabs = {"active", ""};
    private List<string> _sqlCodeHistory = new();
    readonly XCodeEditor _resultEditor = null!;
    private ElementReference _sqlCodeHistorySelector;
    private string _text = string.Empty;

    private string _codeText = @"-- CTRL + r: execute 
-- CTRL + i: insert code block from history
-- CTRL + <space>: popup intellisence
";

    private string _sqlSnippetCode = string.Empty;
    private List<ExcelSheet> _results = new();
    private MergeTableForm _mergeTableForm = null!;
    private bool _isShowMergeTableForm;
    private DateTime _resultTime = DateTime.Now;

    private void ClickTab(int index)
    {
        for (var i = 0; i < _isShowTabs.Length; i++)
        {
            _isShowTabs[i] = string.Empty;
            if (i == index)
            {
                _isShowTabs[i] = "active";
            }
        }
        _resultEditor.ForceUpdate();
    }

    private void CopyCsvToClipboard(ExcelSheet sheet)
    {
        JsRuntime.InvokeVoidAsync("copyTextToClipboard", sheet.ToCsvString());
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Init();
            _sqlCodeHistory = QueryService.GetTop10SqlCode();
            StateHasChanged();
            try
            {
    //var t = await _jsRuntime.InvokeAsync<string[]>("getDrivesAsync");
            }
            catch (Exception e)
            {
                Console.WriteLine("load wasm fail" + e.Message);
            }
        }
        return Task.CompletedTask;
    }

    private void Init()
    {
        AppState.SubscribeEvent<MergeTableReqEvent>(args =>
        {
            InvokeAsync(() =>
            {
                _codeEditor.SetShow(false);
                _isShowMergeTableForm = true;
                _mergeTableForm.SelectTable(args.LeftTableName, args.RightTableName);
                StateHasChanged();
            });
    //_codeEditor.SetShow(true);
    //StateHasChanged();
        });
    }

    private Task OnSqlCodeRan(SqlCodeRunEventArgs arg)
    {
    //StateHasChanged();
        _results = QueryService.QueryRawSql(arg.SqlCode);
        _resultTime = DateTime.Now;
        QueryService.AddSqlCode(arg.SqlCode);
        _sqlCodeHistory = QueryService.GetTop10SqlCode();
        _text = string.Empty;
        return Task.CompletedTask;
    }

    private Task HandleSelectionSqlHistoryChange(ChangeEventArgs arg)
    {
        var value = (string[]) arg.Value!;
        _sqlSnippetCode = value[0];
        return Task.CompletedTask;
    }

    private async Task OnCodeEditorKey(KeyEventArgs arg)
    {
        if (arg.KeyCode == KeyCode.KeyI)
        {
            await _codeEditor.SetIntelliSenseAsync(new List<IntelliSenseItem>()
            {
                new()
                {
                    Label = "XXX", 
                    Kind = IntelliSenseItemType.Keyword, 
                    Detail = "Keyword", 
                    InsertText = "XXX "
                }
            });
            //await _codeEditor.InsertAsync(_sqlSnippetCode);
            await _codeEditor.TriggerIntelliSenseAsync();
        }
        
        if (arg.KeyCode == KeyCode.Space)
        {
            await _codeEditor.SetIntelliSenseAsync(new List<IntelliSenseItem>());
        }
    }

    private void OnClickCloseMergeTableForm()
    {
        _codeEditor.SetShow(true);
        _isShowMergeTableForm = false;
        StateHasChanged();
    }

    private async Task ConvertText()
    {
        var text = await _codeEditor.GetValue();
        _text = QueryService.ConvertText(text);
    }

}