@page "/queryForm"
<PageTitle>Query</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-8">
            <div>@_textFormat.ToString() <button @onclick="OnClickDetect">Detect</button></div>
            <XCodeEditor @ref="_codeEditor"
                         SqlCodeRanCallback="@OnSqlCodeRan"
                         OnIntellisenseCallback="@OnIntellisense"
                         Text="@_codeText"
                         Language="csharp"
                         KeyCallback="@OnCodeEditorKey"/>
        </div>
        <div class="col-md-4">
            <select class="form-select" multiple aria-label="multiple select example"
                    @ref="_sqlCodeHistorySelector"
                    @onchange="HandleSelectionSqlHistoryChange">
                @foreach (var sqlCode in _sqlCodeHistory)
                {
                    <option value="@sqlCode">@sqlCode</option>
                }
            </select>
            <button class="btn btn-primary" @onclick="ConvertText">Convert Text</button>
        </div>
    </div>
</div>

<div>@_resultTime.ToString("yyyy/MM/dd HH:mm:ss,fff")</div>

@foreach (var result in _results)
{
    <XSheetTable Sheet="@result"></XSheetTable>
}

@if (!_results.Any())
{
    <div>No Data</div>
    <textarea style="width: 80ch; height: 30ch;">
    @_text
    </textarea>
}


<Modal IsShow="_isShowMergeTableForm" OnClickClose="OnClickCloseMergeTableForm">
    <Body>
    <MergeTableForm @ref="_mergeTableForm"></MergeTableForm>
    </Body>
</Modal>

<style>
.table-dark tbody tr:nth-of-type(odd) {
    background-color: #f2f2f2;
}    
</style>
@using QueryWeb.Shared
@using QueryKits.Services
@using QueryKits.ExcelUtils
@using QueryKits.Extensions
@using QueryWeb.Models
@using QueryWeb.Models.Clients
@using QueryWeb.Models.CodeEditorModels
@using T1.WebTools.CsvEx
@inject IJSRuntime JsRuntime
@inject IQueryService QueryService
@inject IAppState AppState
@inject IEventAggregator EventAggregator
@implements QueryKits.Extensions.IHandle<MergeTableReqEvent>
@inject IPredictNextWordsClient PredictNextWordsClient
@code {
    private XCodeEditor _codeEditor = null!;
    private readonly string[] _isShowTabs = { "active", "" };
    private List<string> _sqlCodeHistory = new();
    readonly XCodeEditor _resultEditor = null!;
    private ElementReference _sqlCodeHistorySelector;
    private string _text = string.Empty;
    private TextFormat _textFormat = TextFormat.Text;

    private string _codeText = string.Empty;

    private string _sqlSnippetCode = string.Empty;
    private List<ExcelSheet> _results = new();
    private MergeTableForm _mergeTableForm = null!;
    private bool _isShowMergeTableForm;
    private DateTime _resultTime = DateTime.Now;

    private void ClickTab(int index)
    {
        for (var i = 0; i < _isShowTabs.Length; i++)
        {
            _isShowTabs[i] = string.Empty;
            if (i == index)
            {
                _isShowTabs[i] = "active";
            }
        }
        _resultEditor.ForceUpdate();
    }

    private void CopyCsvToClipboard(ExcelSheet sheet)
    {
        JsRuntime.InvokeVoidAsync("copyTextToClipboard", sheet.ToCsvString());
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Initialize();
            _sqlCodeHistory = QueryService.GetTop10SqlCode();
            StateHasChanged();
            try
            {
    //var t = await _jsRuntime.InvokeAsync<string[]>("getDrivesAsync");
            }
            catch (Exception e)
            {
                Console.WriteLine("load wasm fail" + e.Message);
            }
        }
        return Task.CompletedTask;
    }

    private void Initialize()
    {
        EventAggregator.Subscribe(this);
    }

    private async Task OnSqlCodeRan(SqlCodeRunEventArgs arg)
    {
        await InvokeAsync(async () =>
        {
            await AppState.PublishAsync(state => state.IsLoading = true);
            try
            {
                _results = QueryService.QueryRawSql(arg.SqlCode);
                await PredictNextWordsClient.AddSqlAsync(arg.SqlCode);
                QueryService.AddSqlCode(arg.SqlCode);
                _sqlCodeHistory = QueryService.GetTop10SqlCode();
                _text = string.Empty;
            }
            catch(Exception ex)
            {
                _results = new();
                _text = ex.Message;
            }
            _resultTime = DateTime.Now;
            await AppState.PublishEventAsync(new RefreshTableReqEvent());
            await AppState.PublishAsync(state => state.IsLoading = false);
        });
    }

    private Task HandleSelectionSqlHistoryChange(ChangeEventArgs arg)
    {
        var value = (string[])arg.Value!;
        _sqlSnippetCode = value[0];
        return Task.CompletedTask;
    }

    private Task OnCodeEditorKey(KeyEventArgs arg)
    {
        if (arg.KeyCode == KeyCode.KeyI)
        {
            // await _codeEditor.SetIntelliSenseAsync(new List<IntelliSenseItem>()
            // {
            //     new()
            //     {
            //         Label = "XXX",
            //         Kind = IntelliSenseItemType.Keyword,
            //         Detail = "Keyword",
            //         InsertText = "XXX "
            //     }
            // });
            //await _codeEditor.InsertAsync(_sqlSnippetCode);
            //await _codeEditor.TriggerIntelliSenseAsync();
        }
        return Task.CompletedTask;
    }

    private void OnClickCloseMergeTableForm()
    {
        _codeEditor.SetShow(true);
        _isShowMergeTableForm = false;
        StateHasChanged();
    }

    private async Task ConvertText()
    {
        var text = await _codeEditor.GetValue();
        _text = QueryService.ConvertText(text);
        _results = new();
    }

    public Task HandleAsync(MergeTableReqEvent args)
    {
        _codeEditor.SetShow(false);
        _isShowMergeTableForm = true;
        _mergeTableForm.SelectTable(args.LeftTableName, args.RightTableName);
        return Task.CompletedTask;
    }

    private async Task OnClickDetect()
    {
        await InvokeAsync(async () =>
        {
            var text = await _codeEditor.GetValue();
            var textConverter = new TextConverter();
            _textFormat = textConverter.GetTextFormat(text);
            var csvSheet = textConverter.ConvertTextToCsvSheet(text);
            csvSheet.Delimiter = ",";
            _results.Clear();
            _text = csvSheet.SaveToString();
        });
    }

    private async Task OnIntellisense(IntellisenseEventArgs arg)
    {
        Console.WriteLine($"call predict '{arg.EditorInfo.PrevText}'");
        var predictResp = await PredictNextWordsClient.InferAsync(arg.EditorInfo.PrevText);
        arg.Suggestions = predictResp.TopK.Select(x => new IntelliSenseItem()
        {
           Label = x.NextWords,
           Kind = IntelliSenseItemType.Keyword, 
           Detail = "", 
           InsertText = x.NextWords
        }).ToList();
        Console.WriteLine($"predict {arg.Suggestions.Count()}");
    }

}