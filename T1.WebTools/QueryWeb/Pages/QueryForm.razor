@page "/queryForm"
<PageTitle>Query</PageTitle>

<Modal IsShow="false">
    <Body>
    <MergeTableForm></MergeTableForm>
    </Body>
</Modal>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-8">
            <MCodeEditor @ref="_codeEditor"
                         SqlCodeRanCallback="@OnSqlCodeRan" Language="csharp"
                         KeyCallback="@OnCodeEditorKey"/>
        </div>
        <div class="col-md-4">
            <select class="form-select" multiple aria-label="multiple select example"
                    @ref="_sqlCodeHistorySelector"
                    @onchange="HandleSelectionSqlHistoryChange">
                @foreach (var sqlCode in _sqlCodeHistory)
                {
                    <option value="@sqlCode">@sqlCode</option>
                }
            </select>
            <button class="btn btn-primary"></button>
        </div>
    </div>
</div>


<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link" @onclick="() => ClickTab(0)">Result</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active" @onclick="() => ClickTab(1)">Grid</a>
    </li>
</ul>
<div class="tab-content mt-3">
    <div class="tab-pane @_isShowTabs[0]">
        <h3>Result</h3>
        <MCodeEditor @ref="_resultEditor" Language="text"/>
    </div>
    <div class="tab-pane @_isShowTabs[1]">
        <h3>Grid</h3>
        <p>Aliquam id nibh consequat, fringilla mauris nec, pellentesque lectus. Sed sed risus sit amet quam eleifend auctor. Vivamus sed est leo. Suspendisse mollis ex in ante aliquet vestibulum. In mattis purus eu enim venenatis pharetra. Etiam ullamcorper neque ac lacus consectetur lacinia. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Proin eget purus sed dolor tristique pharetra vel id turpis.</p>
    </div>
</div>


@foreach (var result in _results.Select((value,index) => new {value, index}))
{
    <a href="javascript:void(0)" @onclick="() => CopyCsvToClipboard(result.value)">Copy Result@(result.index) CSV</a>
}

@using QueryWeb.Shared
@using QueryKits.Services
@using Prism.Events
@using QueryKits.ExcelUtils
@using QueryWeb.Models
@inject IJSRuntime _jsRuntime
@inject IEventAggregator EventAggregator
@inject IQueryService QueryService

@code {
    private MCodeEditor _codeEditor = null!;
    private readonly string[] _isShowTabs = { "active", "" };
    private List<string> _sqlCodeHistory = new();
    MCodeEditor _resultEditor = null!;
    private ElementReference _sqlCodeHistorySelector;
    private string _sqlCode = string.Empty;
    private List<ExcelSheet> _results = new();

    private void ClickTab(int index)
    {
        for (var i = 0; i < _isShowTabs.Length; i++)
        {
            _isShowTabs[i] = string.Empty;
            if (i == index)
            {
                _isShowTabs[i] = "active";
            }
        }
        _resultEditor.ForceUpdate();
    }

    private void CopyCsvToClipboard(ExcelSheet sheet)
    {
        _jsRuntime.InvokeVoidAsync("copyTextToClipboard", sheet.ToCsvString());
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _sqlCodeHistory = QueryService.GetTop10SqlCode();
            StateHasChanged();
            try
            {
    //var t = await _jsRuntime.InvokeAsync<string[]>("getDrivesAsync");
            }
            catch (Exception e)
            {
                Console.WriteLine("load wasm fail" + e.Message);
            }
        }
        return Task.CompletedTask;
    }

    private async Task OnSqlCodeRan(SqlCodeRunEventArgs arg)
    {
        var results = QueryService.QueryRawSql(arg.SqlCode);
    //StateHasChanged();
        await _resultEditor.SetValueAsync($"{DateTime.Now}\r\n");
        foreach (var result in results)
        {
            await _resultEditor.AppendAsync(result.ToCsvString());
            await _resultEditor.AppendAsync("");
        }
        QueryService.AddSqlCode(arg.SqlCode);
        _results = results;
    }

    private Task HandleSelectionSqlHistoryChange(ChangeEventArgs arg)
    {
        var value = (string[])arg.Value!;
        _sqlCode = value[0];
        return Task.CompletedTask;
    }

    private async Task OnCodeEditorKey(KeyEventArgs arg)
    {
        if (arg.KeyCode == KeyCode.KeyI)
        {
            await _codeEditor.InsertAsync(_sqlCode);
        }
    }

}