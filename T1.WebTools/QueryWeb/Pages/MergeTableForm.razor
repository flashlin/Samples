@page "/mergeTableForm"

<PageTitle>Merge Table</PageTitle>

<table class="table">
    <tbody>
    <tr>
        <td>
            <input type="text" class="form-control" placeholder="@_leftTable.Name" disabled>
            <MultipleSelect SelectOptions="@_leftSelectItems" 
                            OnSelected="@OnLeftTableColumnsSelected"
                            @ref="_leftTableColumnsSelector"></MultipleSelect>
            <select multiple class="form-control" size="10" style="overflow-y: scroll;">
                @foreach (var column in _leftTable.Columns)
                {
                    <option value="@column.Name">@column.Name</option>
                }
            </select>
        </td>
        <td>
            <button type="button" class="btn btn-primary">Swap</button>
        </td>
        <td>
            <input type="text" class="form-control" placeholder="@_rightTable.Name" disabled>
            <select multiple class="form-control" size="10" style="overflow-y: scroll;">
                @foreach (var column in _rightTable.Columns)
                {
                    <option value="@column.Name">@column.Name</option>
                }
            </select>
        </td>
    </tr>
    <tr>
        <td>
            <select class="form-select">
                @foreach (var item in _leftTableColumnsSelected)
                {
                    <option>@item.Text</option>
                }
            </select>
        </td>
        <td>
            <button type="button" class="btn btn-primary">button</button>
        </td>
        <td>
            <select class="form-select">
                <option>listbox</option>
            </select>
        </td>
    </tr>
    <tr>
        <td colspan="3">
            <input type="text" class="form-control" placeholder="merge talbe name">
        </td>
    </tr>
    <tr>
        <td colspan="3">
            <textarea class="form-control" rows="10">areatext</textarea>
        </td>
    </tr>
    </tbody>
</table>


@using QueryWeb.Shared
@using QueryKits.Services
@using Prism.Events
@using QueryWeb.Models
@using T1.Standard.Data.SqlBuilders
@inject IReportRepo _reportRepo
@inject IJSRuntime _jsRuntime
@inject IEventAggregator EventAggregator
@inject IQueryService QueryService

@code {
    private TableInfo _leftTable = new();
    private TableInfo _rightTable = new();
    MultipleSelect _leftTableColumnsSelector = null!;
    List<SelectItem> _leftTableColumnsSelected = new();
    MergeType _mergeType;
    IntoType _intoType;
    List<TableColumnInfo> _leftJoinKeys = new();
    List<TableColumnInfo> _rightJoinKeys = new();
    string _targetTableName = "Unknown";

    List<SelectItem> _leftSelectItems = new();

    public void SelectTable(string leftTableName, string rightTableName)
    {
        _leftTable = _reportRepo.GetTableInfo(leftTableName);
        _rightTable = _reportRepo.GetTableInfo(rightTableName);
        _leftSelectItems = _leftTable.Columns.Select(x => new SelectItem {Text = x.Name, Value = x}).ToList();
        StateHasChanged();
    }

    private void OnLeftTableColumnsSelected(MultipleSelectedArgs args)
    {
        _leftTableColumnsSelected = args.SelectedItems;
    }

    public void Run()
    {
        _reportRepo.MergeTable(new MergeTableRequest
        {
            LeftTable = _leftTable,
            LeftJoinKeys = _leftJoinKeys,
            RightTable = _rightTable, 
            RightJoinKeys = _rightJoinKeys, 
            IntoType = _intoType, 
            TargetTableName = _targetTableName, 
            MergeType = _mergeType
        });
    }


    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
    //var t = await _jsRuntime.InvokeAsync<string[]>("getDrivesAsync");
            }
            catch (Exception e)
            {
                Console.WriteLine("load wasm fail" + e.Message);
            }
        }
        return Task.CompletedTask;
    }
}