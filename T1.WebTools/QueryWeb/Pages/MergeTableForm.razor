@page "/mergeTableForm"

<PageTitle>Merge Table</PageTitle>

<div class="div-wrapper">
    <table class="table">
        <tbody>
        <tr>
            <td>
                <input type="text" class="form-control" placeholder="@_leftTable.Name" disabled>
                <XMultipleSelect Options="@_leftColumnsOptions"
                                 OnSelected="@OnLeftColumnsSelected"
                                 @ref="_leftTableColumnsSelector">
                </XMultipleSelect>
            </td>
            <td>
                <button type="button" class="btn btn-primary" @onclick="ClickSwapTable">Swap</button>
            </td>
            <td>
                <input type="text" class="form-control" placeholder="@_rightTable.Name" disabled>
                <XMultipleSelect Options="@_rightColumnsOptions"
                                 OnSelected="@OnRightColumnsSelected"
                                 @ref="_rightTableColumnsSelector">
                </XMultipleSelect>
            </td>
        </tr>
        <tr>
            <td>
                <select class="form-select">
                    @foreach (var item in _leftColumnsSelected)
                    {
                        <option>@item.Text</option>
                    }
                </select>
            </td>
            <td>
                <button type="button" class="btn btn-primary" @onclick="Run">Merge</button>
            </td>
            <td>
                <select class="form-select">
                    @foreach (var item in _rightColumnsSelected)
                    {
                        <option>@item.Text</option>
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td colspan="3">
                <XSelect Options="MergeTypes"
                         ItemSelected="_mergeTypeSelected">
                </XSelect>
            </td>
        </tr>
        <tr>
            <td colspan="3">
                <input type="text" class="form-control" @bind="_targetTableName" placeholder="target merge table name">
            </td>
        </tr>
        <tr>
            <td colspan="3">
                <XSheetTable Sheet="@_result"></XSheetTable>
            </td>
        </tr>
        </tbody>
    </table>
</div>

<style>
.div-wrapper {
    max-height: calc(1.5em * 30);
    overflow-y: auto;
}
</style>


@using QueryWeb.Shared
@using QueryKits.Services
@using Prism.Events
@using QueryKits.ExcelUtils
@using QueryWeb.Models
@using T1.Standard.Data.SqlBuilders
@inject IReportRepo ReportRepo
@inject IJsHelper JsHelper
@inject IQueryService QueryService

@code {
    private TableInfo _leftTable = new();
    private TableInfo _rightTable = new();
    XMultipleSelect _leftTableColumnsSelector = null!;
    List<SelectItem> _leftColumnsOptions = new();
    List<SelectItem> _leftColumnsSelected = new();
    XMultipleSelect _rightTableColumnsSelector = null!;
    List<SelectItem> _rightColumnsOptions = new();
    List<SelectItem> _rightColumnsSelected = new();

    static readonly List<SelectItem> MergeTypes =
        Enum.GetNames(typeof(MergeType))
            .Zip((MergeType[]) Enum.GetValues(typeof(MergeType)), (x, y) =>
                new SelectItem
                {
                    Text = x,
                    Value = y
                }).ToList();

    SelectItem _mergeTypeSelected = MergeTypes.First();

    IntoType _intoType;
    string _targetTableName = "Unknown";
    private ExcelSheet _result = new();


    public void SelectTable(string leftTableName, string rightTableName)
    {
        _leftTable = ReportRepo.GetTableInfo(leftTableName);
        _rightTable = ReportRepo.GetTableInfo(rightTableName);
        _leftColumnsOptions = _leftTable.Columns.Select(x => new SelectItem {Text = x.Name, Value = x}).ToList();
        _rightColumnsOptions = _rightTable.Columns.Select(x => new SelectItem {Text = x.Name, Value = x}).ToList();
        _targetTableName = _leftTable.Name + "_" + _rightTable.Name;
        StateHasChanged();
    }

    private void ClickSwapTable()
    {
        (_leftTable, _rightTable) = (_rightTable, _leftTable);
        (_leftColumnsOptions, _rightColumnsOptions) = (_rightColumnsOptions, _leftColumnsOptions);
    }

    private void OnLeftColumnsSelected(MultipleSelectedArgs args)
    {
        _leftColumnsSelected = args.ItemsSelected;
    }

    private void OnRightColumnsSelected(MultipleSelectedArgs args)
    {
        _rightColumnsSelected = args.ItemsSelected;
    }

    public void Run()
    {
        if (string.IsNullOrEmpty(_targetTableName))
        {
            JsHelper.ShowMessageAsync($"Please input Target Merge Table Name");
            return;
        }

        if (ReportRepo.IsTableExist(_targetTableName))
        {
            JsHelper.ShowMessageAsync($"{_targetTableName} Table exists, please change target table name.");
            return;
        }

        var leftJoinKeys = _leftColumnsSelected.Select(x => x.Value)
            .Cast<TableColumnInfo>()
            .ToList();

        var rightJoinKeys = _rightColumnsSelected.Select(x => x.Value)
            .Cast<TableColumnInfo>()
            .ToList();

        ReportRepo.MergeTable(new MergeTableRequest
        {
            LeftTable = _leftTable,
            LeftJoinKeys = leftJoinKeys,
            RightTable = _rightTable,
            RightJoinKeys = rightJoinKeys,
            IntoType = _intoType,
            TargetTableName = _targetTableName,
            MergeType = (MergeType) _mergeTypeSelected.Value
        });

        _result = QueryService.QueryRawSql("select top 10 * from" + $"[{_targetTableName}]")
            .FirstOrDefault(new ExcelSheet());
    }


    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
    //var t = await _jsRuntime.InvokeAsync<string[]>("getDrivesAsync");
            }
            catch (Exception e)
            {
                Console.WriteLine("load wasm fail" + e.Message);
            }
        }
        return Task.CompletedTask;
    }

}