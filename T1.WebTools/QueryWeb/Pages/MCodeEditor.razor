@page "/MCodeEditor"
@using System.Text
@using QueryKits.Services
@using QueryWeb.Models
@using QueryWeb.Models.Extensions

<PageTitle>Query Form</PageTitle>

<StandaloneCodeEditor 
    @ref="_editor"
    ConstructionOptions="GetOptions"
    OnDidInit="EditorOnDidInit"
    OnKeyDown="OnKeyDown"/>

@inject IJSRuntime JsRuntime
@inject IReportRepo ReportRepo
@code {
    [Parameter]
    public string Language { get; set; } = "csharp";

    //public event EventHandler<SqlCodeRunEventArgs> SqlCodeRan = null!;
    [Parameter]
    public EventCallback<SqlCodeRunEventArgs> SqlCodeRanCallback { get; set; }
    
    [Parameter]
    public EventCallback<KeyEventArgs> KeyCallback { get; set; }

    StandaloneCodeEditor _editor = null!;
    string _valueToSet = "";
    StandaloneEditorConstructionOptions _editorOptions = null!;

    public void ForceUpdate()
    {
        _editor.Layout(_editorOptions.Dimension);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var lineHeight = 16;
            var codeLines = 20;
            var totalHeight = lineHeight * codeLines;
            _editorOptions = new StandaloneEditorConstructionOptions()
            {
                AutomaticLayout = true,
                Language = Language,
                Value = _valueToSet,
                Scrollbar = new EditorScrollbarOptions()
                {
                    UseShadows = false,
                    Vertical = "Hidden",
                    AlwaysConsumeMouseWheel = false,
                    VerticalScrollbarSize = 0,
                    VerticalSliderSize = 0,
                    Horizontal = "Auto"
                },
                ScrollBeyondLastColumn = 0,
                ScrollBeyondLastLine = false,
                GlyphMargin = false,
                Folding = false,
                Contextmenu = false,
                CodeLens = false,
                Minimap = new EditorMinimapOptions() {Enabled = false},
                ReadOnly = false,
                LineNumbers = "on",
                LineDecorationsWidth = 0,
                Lightbulb = new EditorLightbulbOptions() {Enabled = false},
                RenderFinalNewline = false,
                RenderValidationDecorations = "off",
                OverviewRulerBorder = false,
                OverviewRulerLanes = 0,
                Theme = "vs-dark", //"vs-light",
                FixedOverflowWidgets = true,
                LineHeight = lineHeight,
                Dimension = new Dimension {Height = totalHeight},
                ColorDecorators = true,
                OccurrencesHighlight = true,
            };

    //editorElement = await JSRuntime.InvokeAsync<ElementReference>("createEditor", "editor", _editorSettings);
            await JsRuntime.InvokeVoidAsync("addEventListener", "resize", DotNetObjectReference.Create(this), "HandleWindowResize");
        }
    }

    private async Task OnKeyDown(KeyboardEvent e)
    {
        if (e.CtrlKey && e.KeyCode == KeyCode.KeyR)
        {
            var sqlCode = await _editor.GetValue();
            await SqlCodeRanCallback.InvokeAsync(new SqlCodeRunEventArgs
            {
                SqlCode = sqlCode
            });
        }

        await KeyCallback.InvokeAsync(new KeyEventArgs
        {
            CtrlKey = e.CtrlKey,
            KeyCode = e.KeyCode
        });
    }

    private async Task EditorOnDidInit()
    {
        await _editor.AddCommand((int) KeyMod.CtrlCmd | (int) KeyCode.KeyJ, (args) => { Console.WriteLine("Ctrl+J : Initial editor command is triggered."); });
        await _editor.AddCommand((int) KeyMod.CtrlCmd | (int) KeyCode.KeyR, async (args) => { });
        await _editor.AddCommand((int) KeyMod.CtrlCmd | (int) KeyCode.KeyI, async (args) => { });
    }

    async Task RunCtrlR()
    {
        var sqlCode = await GetValue();
        ReportRepo.AddSqlCode(sqlCode);
        await SqlCodeRanCallback.InvokeAsync(new SqlCodeRunEventArgs
        {
            SqlCode = await GetValue()
        });
    }

    [JSInvokable]
    public Task HandleWindowResize()
    {
    // 取得編輯器的容器元素
    //var container = await JSRuntime.InvokeAsync<ElementReference>("getEditorContainer", editorElement);
    // 取得容器元素的寬度和高度
    //var width = await JSRuntime.InvokeAsync<int>("getElementWidth", container);
    //var height = await JSRuntime.InvokeAsync<int>("getElementHeight", container);
    // 設定編輯器的大小
    //await JSRuntime.InvokeVoidAsync("setEditorDimension", editorElement, width, height);
        ForceUpdate();
        return Task.CompletedTask;
    }

    public async Task SetValue(string text)
    {
        await _editor.SetValue(text);
    }

    private async Task<string> GetValue()
    {
        var val = await _editor.GetValue();
        return val;
    }

    public StandaloneEditorConstructionOptions GetOptions(StandaloneCodeEditor editor)
    {
        return _editorOptions;
    }

    public async Task Insert(string text)
    {
        await JsRuntime.InvokeVoidAsync("monacoEditorInsertText", _editor.Id, text);
    }
}