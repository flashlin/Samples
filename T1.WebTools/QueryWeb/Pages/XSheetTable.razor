@using QueryWeb.Models
@using QueryKits.ExcelUtils
@using T1.Standard.Collections.Extension
@using T1.Standard.Collections.Generics
@using T1.Standard.Data.SqlBuilders
@using T1.Standard.Linq

<button @onclick="() => CopyCsvToClipboard(Sheet)">Export CSV to Clipboard</button>
<table class="table table-dark table-striped">
    <thead>
    <tr>
        @foreach (var header in Sheet.Headers)
        {
            <th>
                <input type="checkbox" @bind="_headersSelected[header.Name]"/>
                @header.Name
            </th>
        }
    </tr>
    </thead>
    <tbody>
    @foreach (var row in Sheet.Rows)
    {
        <tr>
            @foreach (var column in row.Keys)
            {
                <td>
                    @row[column]
                </td>
            }
        </tr>
    }
    @if (!Sheet.Rows.Any())
    {
        <tr>
            <td>No Data</td>
        </tr>
    }
    </tbody>
</table>


@inject IJSRuntime JsRuntime

@code {

    [Parameter]
    public ExcelSheet Sheet { get; set; } = new();

    EnsureKeyDictionary<string, bool> _headersSelected = new(key => false);

    private void CopyCsvToClipboard(ExcelSheet sheet)
    {
        var headers = _headersSelected.Clone();
        if (!_headersSelected.Any(x => x.Value))
        {
            headers = Sheet.Headers.ToDictionary(x => x.Name, x => true);
        }
        
        var newSheet = new ExcelSheet
        {
            Headers = Sheet.Headers
                .Join(headers.Where(x => x.Value).Select(x => x.Key),
                    header => header.Name,
                    headerName => headerName,
                    (header, name) => header)
                .ToList()
        };

        foreach (var row in Sheet.Rows)
        {
            var data = row.Join(newSheet.Headers,
                kv => kv.Key,
                column => column.Name,
                (kv, column) => kv)
                .ToDictionary(x => x.Key, x => x.Value);
            newSheet.Rows.Add(data);
        }

        //JsRuntime.InvokeVoidAsync("copyTextToClipboard", sheet.ToCsvString());
        JsRuntime.InvokeVoidAsync("copyTextToClipboard", newSheet.ToCsvString());
    }

}