@using QueryKits.Services
@using Prism.Events
@using QueryWeb.Models
@using QueryWeb.Pages
@using T1.Standard.Collections.Generics
@using QueryWeb.Models.TagHelpers

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">QueryWeb</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>


@* <Modal IsShow="@_showMergeTableForm"> *@
@*     <Body> *@
@*     <MergeTableForm @ref="_mergeTableForm"></MergeTableForm> *@
@*     </Body> *@
@* </Modal> *@

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="mb-3">
            <label class="form-label">
                <span class="text">Import Data(.csv, .xlsx)</span>
            </label>
            <input type="file" @ref="_inputFileRef" class="form-control" accept=".csv,.xlsx">
        </div>
        <div class="mb-3">
            <Button class="btn btn-primary" @onclick="@(() => UploadFile(_inputFileRef))">Import</Button>
        </div>
        <div class="nav-item px-3 dropdown">
            <NavLink class="nav-link dropdown-toggle" href="queryForm">
                <span class="oi oi-plus" aria-hidden="true"></span> Query
            </NavLink>
            @foreach (var tableName in _allTableNames)
            {
                <div style="display: block">
                    <input type="checkbox" @bind="_selectedTableNames[tableName]"/>
                    <span class="text-left text-white">@tableName</span>
                    <button type="button" class="close" @onclick="() => DeleteTable(tableName)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            }
            <button class="btn btn-primary" @onclick="MergeTable">Merge</button>
        </div>
        @* <div class="nav-item px-3"> *@
        @*     <NavLink class="nav-link" href="fetchdata"> *@
        @*         <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data *@
        @*     </NavLink> *@
        @* </div> *@
    </nav>
</div>

<Confirm @ref="_confirmRef"></Confirm>

<style>
.text{
    color: white;
    font-size: 20px;
}
</style>

@inject IQueryService QueryService
@inject IJSRuntime JsRuntime
@inject IAppState AppState
@inject IEventAggregator EventAggregator
@inject IQueryEnvironment QueryEnvironment
@inject IJsHelper JsHelper

@code {
    bool _showMergeTableForm;
    MergeTableForm _mergeTableForm = null!;
    List<string> _allTableNames = new();
    bool _collapseNavMenu = true;
    ElementReference _inputFileRef;
    Confirm _confirmRef = null!;

    EnsureKeyDictionary<string, bool> _selectedTableNames = new(key => false);

    private string? NavMenuCssClass => _collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }

    private void MergeTable()
    {
        var tables = _selectedTableNames.Where(x => x.Value)
            .Select(x => x.Key)
            .ToList();

        if (tables.Count() != 2)
        {
            JsHelper.ShowMessageAsync("Please select two table.");
            return;
        }
        
        InvokeAsync(() =>
        {
            AppState.PublishEvent(new MergeTableReqEvent()
            {
                LeftTableName = tables[0],
                RightTableName = tables[1],
            });
        });
    //_mergeTableForm.SelectTable(tables[0], tables[1]);
        _showMergeTableForm = true;
    }

    private async Task UploadFile(ElementReference fileInput)
    {
        AppState.Publish(x => x.IsLoading = true);
        await JsRuntime.InvokeVoidAsync("uploadFileElementAsync",
            "/api/File/Upload",
            DotNetObjectReference.Create(this),
            fileInput);

        _allTableNames = QueryService.GetAllTableNames();
        AppState.Publish(x => x.IsLoading = false);
    }

    private async Task DeleteTable(string tableName)
    {
        var answer = await _confirmRef.Show($"Do you want to delete {tableName}?");
        if (answer)
        {
            QueryService.DeleteTable(tableName);
            _allTableNames = QueryService.GetAllTableNames();
        }
    }

    [JSInvokable]
    public void ImportCsvFile(string csvFileName)
    {
        var fullname = Path.Combine(QueryEnvironment.UploadPath, csvFileName);
        QueryService.ImportCsvFile(fullname);
    }

    protected override Task OnInitializedAsync()
    {
        _allTableNames = QueryService.GetAllTableNames();
        return Task.CompletedTask;
    }

}