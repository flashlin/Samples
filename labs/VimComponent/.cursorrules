# Project Context
This is a Web Component library project built with TypeScript.

## Pre-requisites Before Handling User Requests
Before processing any user request, you must:
1. Scan the current project structure
2. Understand the project content and architecture
3. Then proceed with the user's request

## Code Style Guidelines

### Method Length
- Keep method content short and focused
- Extract code blocks into smaller methods based on functionality
- Each method should have a single, clear responsibility

### Comments
- Do not write comments in the code
- Code should be self-documenting through clear naming and structure

## TypeScript Standards
- Use camelCase for interface properties
- Follow TypeScript best practices for Web Component development

## Key Mapping Implementation Guidelines

### Priority: Use commandPatterns
When adding any key mapping functionality:
1. **First Priority**: Use the `commandPatterns` array with pattern-based approach
   - Add new patterns to the `commandPatterns` array
   - Define the key sequence as a pattern string
   - Implement the action as a callback function
   - This approach is preferred for its simplicity and maintainability

2. **Alternative Approach**: Only implement custom logic when:
   - The pattern-based approach cannot handle the requirement
   - Complex state management is needed beyond simple pattern matching
   - Special handling is required that doesn't fit the pattern model

### Example
```typescript
// Good: Using commandPatterns
{ pattern: 'gg', action: () => { this.moveToFirstLine(); } }

// Only when necessary: Custom implementation
if (this.keyBuffer === 'special' && needsComplexLogic) {
  // custom handling
}
```

