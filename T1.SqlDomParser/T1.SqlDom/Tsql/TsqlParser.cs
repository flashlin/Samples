//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TsqlParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace T1.SqlDom.Tsql {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class TsqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SPACE=1, SPEC_ESSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, DOT=5, 
		UNDERLINE=6, LBRACKET=7, RBRACKET=8, LPAREN=9, RPAREN=10, MINUS=11, STAR=12, 
		COMMA=13, SEMI=14, GT=15, SINGLE_QUOTE=16, DOUBLE_QUOTE=17, REVERSE_QUOTE=18, 
		COLON=19, EQ=20, NE=21, BOOLOR=22, BOOLAND=23, INT=24, DECIMAL=25, SELECT=26, 
		ALL=27, DISTINCT=28, DELETED=29, INSERTED=30, TOP=31, AS=32, ID_LETTER=33, 
		SQUARE_BRACKET_ID=34, STRING=35;
	public const int
		RULE_select_statement = 0, RULE_top_clause = 1, RULE_top_count = 2, RULE_column_elem = 3, 
		RULE_full_column_name = 4, RULE_select_list = 5, RULE_id_ = 6, RULE_as_column_alias = 7, 
		RULE_column_alias = 8;
	public static readonly string[] ruleNames = {
		"select_statement", "top_clause", "top_count", "column_elem", "full_column_name", 
		"select_list", "id_", "as_column_alias", "column_alias"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'.'", "'_'", "'['", "']'", "'('", "')'", 
		"'-'", "'*'", null, "';'", "'>'", "'''", "'\"'", "'`'", null, "'='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SPACE", "SPEC_ESSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
		"DOT", "UNDERLINE", "LBRACKET", "RBRACKET", "LPAREN", "RPAREN", "MINUS", 
		"STAR", "COMMA", "SEMI", "GT", "SINGLE_QUOTE", "DOUBLE_QUOTE", "REVERSE_QUOTE", 
		"COLON", "EQ", "NE", "BOOLOR", "BOOLAND", "INT", "DECIMAL", "SELECT", 
		"ALL", "DISTINCT", "DELETED", "INSERTED", "TOP", "AS", "ID_LETTER", "SQUARE_BRACKET_ID", 
		"STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TsqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TsqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TsqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TsqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Select_statementContext : ParserRuleContext {
		public IToken allOrDistinct;
		public Top_clauseContext top;
		public Select_listContext columns;
		public ITerminalNode SELECT() { return GetToken(TsqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		public Top_clauseContext top_clause() {
			return GetRuleContext<Top_clauseContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(TsqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(TsqlParser.DISTINCT, 0); }
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITsqlParserListener typedListener = listener as ITsqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITsqlParserListener typedListener = listener as ITsqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITsqlParserVisitor<TResult> typedVisitor = visitor as ITsqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(Context, State);
		EnterRule(_localctx, 0, RULE_select_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; Match(SELECT);
			State = 20;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 19;
				_localctx.allOrDistinct = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					_localctx.allOrDistinct = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 22; _localctx.top = top_clause();
				}
			}

			State = 25; _localctx.columns = select_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_clauseContext : ParserRuleContext {
		public ITerminalNode TOP() { return GetToken(TsqlParser.TOP, 0); }
		public Top_countContext top_count() {
			return GetRuleContext<Top_countContext>(0);
		}
		public Top_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITsqlParserListener typedListener = listener as ITsqlParserListener;
			if (typedListener != null) typedListener.EnterTop_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITsqlParserListener typedListener = listener as ITsqlParserListener;
			if (typedListener != null) typedListener.ExitTop_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITsqlParserVisitor<TResult> typedVisitor = visitor as ITsqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_clauseContext top_clause() {
		Top_clauseContext _localctx = new Top_clauseContext(Context, State);
		EnterRule(_localctx, 2, RULE_top_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; Match(TOP);
			{
			State = 28; top_count();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_countContext : ParserRuleContext {
		public IToken count_constant;
		public ITerminalNode DECIMAL() { return GetToken(TsqlParser.DECIMAL, 0); }
		public Top_countContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_count; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITsqlParserListener typedListener = listener as ITsqlParserListener;
			if (typedListener != null) typedListener.EnterTop_count(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITsqlParserListener typedListener = listener as ITsqlParserListener;
			if (typedListener != null) typedListener.ExitTop_count(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITsqlParserVisitor<TResult> typedVisitor = visitor as ITsqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_count(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_countContext top_count() {
		Top_countContext _localctx = new Top_countContext(Context, State);
		EnterRule(_localctx, 4, RULE_top_count);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; _localctx.count_constant = Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_elemContext : ParserRuleContext {
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public As_column_aliasContext as_column_alias() {
			return GetRuleContext<As_column_aliasContext>(0);
		}
		public Column_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITsqlParserListener typedListener = listener as ITsqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITsqlParserListener typedListener = listener as ITsqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITsqlParserVisitor<TResult> typedVisitor = visitor as ITsqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_elemContext column_elem() {
		Column_elemContext _localctx = new Column_elemContext(Context, State);
		EnterRule(_localctx, 6, RULE_column_elem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 32; full_column_name();
			}
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << ID_LETTER) | (1L << SQUARE_BRACKET_ID) | (1L << STRING))) != 0)) {
				{
				State = 33; as_column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_column_nameContext : ParserRuleContext {
		public Id_Context column_name;
		public Id_Context server;
		public Id_Context schema;
		public Id_Context tablename;
		public ITerminalNode[] DOT() { return GetTokens(TsqlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TsqlParser.DOT, i);
		}
		public ITerminalNode DELETED() { return GetToken(TsqlParser.DELETED, 0); }
		public ITerminalNode INSERTED() { return GetToken(TsqlParser.INSERTED, 0); }
		public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		public Full_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITsqlParserListener typedListener = listener as ITsqlParserListener;
			if (typedListener != null) typedListener.EnterFull_column_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITsqlParserListener typedListener = listener as ITsqlParserListener;
			if (typedListener != null) typedListener.ExitFull_column_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITsqlParserVisitor<TResult> typedVisitor = visitor as ITsqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_column_nameContext full_column_name() {
		Full_column_nameContext _localctx = new Full_column_nameContext(Context, State);
		EnterRule(_localctx, 8, RULE_full_column_name);
		int _la;
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36;
				_la = TokenStream.LA(1);
				if ( !(_la==DELETED || _la==INSERTED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 37; Match(DOT);
				State = 38; _localctx.column_name = id_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID_LETTER || _la==SQUARE_BRACKET_ID) {
					{
					State = 39; _localctx.server = id_();
					}
				}

				State = 42; Match(DOT);
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID_LETTER || _la==SQUARE_BRACKET_ID) {
					{
					State = 43; _localctx.schema = id_();
					}
				}

				State = 46; Match(DOT);
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID_LETTER || _la==SQUARE_BRACKET_ID) {
					{
					State = 47; _localctx.tablename = id_();
					}
				}

				State = 50; Match(DOT);
				State = 51; _localctx.column_name = id_();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID_LETTER || _la==SQUARE_BRACKET_ID) {
					{
					State = 52; _localctx.schema = id_();
					}
				}

				State = 55; Match(DOT);
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID_LETTER || _la==SQUARE_BRACKET_ID) {
					{
					State = 56; _localctx.tablename = id_();
					}
				}

				State = 59; Match(DOT);
				State = 60; _localctx.column_name = id_();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID_LETTER || _la==SQUARE_BRACKET_ID) {
					{
					State = 61; _localctx.tablename = id_();
					}
				}

				State = 64; Match(DOT);
				State = 65; _localctx.column_name = id_();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 66; _localctx.column_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_listContext : ParserRuleContext {
		public Column_elemContext _column_elem;
		public IList<Column_elemContext> _selectElement = new List<Column_elemContext>();
		public Column_elemContext[] column_elem() {
			return GetRuleContexts<Column_elemContext>();
		}
		public Column_elemContext column_elem(int i) {
			return GetRuleContext<Column_elemContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TsqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TsqlParser.COMMA, i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITsqlParserListener typedListener = listener as ITsqlParserListener;
			if (typedListener != null) typedListener.EnterSelect_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITsqlParserListener typedListener = listener as ITsqlParserListener;
			if (typedListener != null) typedListener.ExitSelect_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITsqlParserVisitor<TResult> typedVisitor = visitor as ITsqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_listContext select_list() {
		Select_listContext _localctx = new Select_listContext(Context, State);
		EnterRule(_localctx, 10, RULE_select_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; _localctx._column_elem = column_elem();
			_localctx._selectElement.Add(_localctx._column_elem);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 70; Match(COMMA);
				State = 71; column_elem();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_Context : ParserRuleContext {
		public ITerminalNode ID_LETTER() { return GetToken(TsqlParser.ID_LETTER, 0); }
		public ITerminalNode SQUARE_BRACKET_ID() { return GetToken(TsqlParser.SQUARE_BRACKET_ID, 0); }
		public Id_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITsqlParserListener typedListener = listener as ITsqlParserListener;
			if (typedListener != null) typedListener.EnterId_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITsqlParserListener typedListener = listener as ITsqlParserListener;
			if (typedListener != null) typedListener.ExitId_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITsqlParserVisitor<TResult> typedVisitor = visitor as ITsqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Id_Context id_() {
		Id_Context _localctx = new Id_Context(Context, State);
		EnterRule(_localctx, 12, RULE_id_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			_la = TokenStream.LA(1);
			if ( !(_la==ID_LETTER || _la==SQUARE_BRACKET_ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_column_aliasContext : ParserRuleContext {
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(TsqlParser.AS, 0); }
		public As_column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITsqlParserListener typedListener = listener as ITsqlParserListener;
			if (typedListener != null) typedListener.EnterAs_column_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITsqlParserListener typedListener = listener as ITsqlParserListener;
			if (typedListener != null) typedListener.ExitAs_column_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITsqlParserVisitor<TResult> typedVisitor = visitor as ITsqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_column_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_column_aliasContext as_column_alias() {
		As_column_aliasContext _localctx = new As_column_aliasContext(Context, State);
		EnterRule(_localctx, 14, RULE_as_column_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 79; Match(AS);
				}
			}

			State = 82; column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ITerminalNode STRING() { return GetToken(TsqlParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITsqlParserListener typedListener = listener as ITsqlParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITsqlParserListener typedListener = listener as ITsqlParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITsqlParserVisitor<TResult> typedVisitor = visitor as ITsqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(Context, State);
		EnterRule(_localctx, 16, RULE_column_alias);
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID_LETTER:
			case SQUARE_BRACKET_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84; id_();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 85; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '%', '[', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', '\x17', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\x1A', 
		'\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '%', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '+', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '/', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x33', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x38', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '<', '\n', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x41', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x46', 
		'\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'K', '\n', 
		'\a', '\f', '\a', '\xE', '\a', 'N', '\v', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x5', '\t', 'S', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', 'Y', '\n', '\n', '\x3', '\n', '\x2', '\x2', 
		'\v', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x2', 
		'\x5', '\x3', '\x2', '\x1D', '\x1E', '\x3', '\x2', '\x1F', ' ', '\x3', 
		'\x2', '#', '$', '\x2', '\x61', '\x2', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x6', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\"', '\x3', '\x2', '\x2', '\x2', '\n', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'G', '\x3', '\x2', '\x2', '\x2', '\xE', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'R', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'X', '\x3', '\x2', '\x2', '\x2', '\x14', '\x16', '\a', '\x1C', '\x2', 
		'\x2', '\x15', '\x17', '\t', '\x2', '\x2', '\x2', '\x16', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x17', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1A', '\x5', '\x4', '\x3', 
		'\x2', '\x19', '\x18', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1C', '\x5', '\f', '\a', '\x2', '\x1C', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1E', '\a', '!', '\x2', '\x2', '\x1E', '\x1F', '\x5', 
		'\x6', '\x4', '\x2', '\x1F', '\x5', '\x3', '\x2', '\x2', '\x2', ' ', '!', 
		'\a', '\x1B', '\x2', '\x2', '!', '\a', '\x3', '\x2', '\x2', '\x2', '\"', 
		'$', '\x5', '\n', '\x6', '\x2', '#', '%', '\x5', '\x10', '\t', '\x2', 
		'$', '#', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', 
		'%', '\t', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\t', '\x3', '\x2', 
		'\x2', '\'', '(', '\a', '\a', '\x2', '\x2', '(', '\x46', '\x5', '\xE', 
		'\b', '\x2', ')', '+', '\x5', '\xE', '\b', '\x2', '*', ')', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', 
		'\x2', '\x2', ',', '.', '\a', '\a', '\x2', '\x2', '-', '/', '\x5', '\xE', 
		'\b', '\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x32', 
		'\a', '\a', '\x2', '\x2', '\x31', '\x33', '\x5', '\xE', '\b', '\x2', '\x32', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\a', 
		'\a', '\x2', '\x2', '\x35', '\x46', '\x5', '\xE', '\b', '\x2', '\x36', 
		'\x38', '\x5', '\xE', '\b', '\x2', '\x37', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x39', ';', '\a', '\a', '\x2', '\x2', ':', '<', 
		'\x5', '\xE', '\b', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', ';', 
		'<', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\a', '\a', '\x2', '\x2', '>', '\x46', '\x5', '\xE', '\b', '\x2', 
		'?', '\x41', '\x5', '\xE', '\b', '\x2', '@', '?', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x43', '\a', '\a', '\x2', '\x2', '\x43', 
		'\x46', '\x5', '\xE', '\b', '\x2', '\x44', '\x46', '\x5', '\xE', '\b', 
		'\x2', '\x45', '&', '\x3', '\x2', '\x2', '\x2', '\x45', '*', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x37', '\x3', '\x2', '\x2', '\x2', '\x45', '@', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\v', '\x3', '\x2', '\x2', '\x2', 'G', 'L', '\x5', '\b', '\x5', 
		'\x2', 'H', 'I', '\a', '\xF', '\x2', '\x2', 'I', 'K', '\x5', '\b', '\x5', 
		'\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 'K', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'M', '\r', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'P', '\t', '\x4', '\x2', '\x2', 'P', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'S', '\a', '\"', '\x2', '\x2', 'R', 'Q', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'U', '\x5', '\x12', '\n', '\x2', 'U', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'V', 'Y', '\x5', '\xE', '\b', '\x2', 'W', 
		'Y', '\a', '%', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 
		'W', '\x3', '\x2', '\x2', '\x2', 'Y', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\xF', '\x16', '\x19', '$', '*', '.', '\x32', '\x37', ';', '@', '\x45', 
		'L', 'R', 'X',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace T1.SqlDom.Tsql
