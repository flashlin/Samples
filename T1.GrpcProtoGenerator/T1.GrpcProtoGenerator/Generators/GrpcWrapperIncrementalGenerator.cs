using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace T1.GrpcProtoGenerator.Generators
{
    [Generator]
    public class GrpcWrapperIncrementalGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            // Always generate a debug file to see if generator is loaded
            context.RegisterPostInitializationOutput(ctx =>
            {
                ctx.AddSource("Debug_Generator_Loaded.cs", 
                    SourceText.From("// Generator was loaded at " + System.DateTime.Now, Encoding.UTF8));
            });

            var protoFiles = context.AdditionalTextsProvider
                .Where(f => f.Path.EndsWith(".proto"));

            var protoTexts = protoFiles.Select((text, _) => text.GetText()!.ToString());

            context.RegisterSourceOutput(protoTexts, (spc, protoText) =>
            {
                // Add debug output to see if generator is being called
                spc.AddSource("Debug_Generator_Called.cs", 
                    SourceText.From("// Generator was called at " + System.DateTime.Now, Encoding.UTF8));
                
                var model = ProtoParser.ParseProtoText(protoText);
                var source = GenerateWrapperSource(model);
                spc.AddSource("Generated_" + model.Services.FirstOrDefault()?.Name + ".cs",
                              SourceText.From(source, Encoding.UTF8));
            });
        }

        private string GenerateWrapperSource(ProtoModel model)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated />");
            sb.AppendLine("using System;");
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine("using System.Threading;");
            sb.AppendLine("using System.Threading.Tasks;");
            sb.AppendLine("using DemoServer;");
            sb.AppendLine("using Grpc.Core;");
            sb.AppendLine();
            sb.AppendLine("namespace ProtoWrapGen.Generated");
            sb.AppendLine("{");

            // DTOs
            foreach (var msg in model.Messages)
            {
                sb.AppendLine($"public class {msg.Name}Dto {{");
                foreach (var f in msg.Fields)
                {
                    var csType = f.IsRepeated ? $"List<{f.Type}>" : f.Type;
                    sb.AppendLine($"    public {csType} {char.ToUpper(f.Name[0]) + f.Name.Substring(1)} {{ get; set; }}");
                }
                sb.AppendLine("}");
            }

            // Enums
            foreach (var e in model.Enums)
            {
                sb.AppendLine($"public enum {e.Name} {{");
                foreach (var val in e.Values)
                    sb.AppendLine($"    {val.Name} = {val.Value},");
                sb.AppendLine("}");
            }

            // Interfaces & wrappers
            foreach (var svc in model.Services)
            {
                var iface = $"I{svc.Name}Client";
                sb.AppendLine($"public interface {iface} {{");
                foreach (var rpc in svc.Rpcs)
                    sb.AppendLine($"    Task<{rpc.ResponseType}Dto> {rpc.Name}Async({rpc.RequestType}Dto request, CancellationToken cancellationToken = default);");
                sb.AppendLine("}");

                var wrapper = $"{svc.Name}ClientWrapper";
                var grpcClient = $"DemoServer.{svc.Name}.{svc.Name}Client";
                sb.AppendLine($"public class {wrapper} : {iface} {{");
                sb.AppendLine($"    private readonly {grpcClient} _inner;");
                sb.AppendLine($"    public {wrapper}({grpcClient} inner) {{ _inner = inner; }}");

                foreach (var rpc in svc.Rpcs)
                {
                    sb.AppendLine($"    public async Task<{rpc.ResponseType}Dto> {rpc.Name}Async({rpc.RequestType}Dto request, CancellationToken cancellationToken = default) {{");
                    sb.AppendLine($"        var grpcReq = new DemoServer.{rpc.RequestType}();");
                    sb.AppendLine($"        var grpcResp = await _inner.{rpc.Name}Async(grpcReq, cancellationToken: cancellationToken);");
                    sb.AppendLine($"        var dto = new {rpc.ResponseType}Dto();");
                    sb.AppendLine($"        return dto;");
                    sb.AppendLine($"    }}");
                }
                sb.AppendLine("}");
            }

            sb.AppendLine("}");
            return sb.ToString();
        }
    }
}
