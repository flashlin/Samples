# Whether it is new Vue({...}) in 2.x or createApp({...}) in 3.0, 
we need to create a Vue object instance first and assign it to a variable, 
such as vm in the example.

```
// Vue 2.x 
const vm = new Vue({ 
  data: { 
    message: 'Hello Vue 2.0!' 
  }
}); 
// Mount to the specified web node via `$mount`
vm.$mount('#app');
```

```
// Vue 3.0 
const vm = Vue.createApp({ 
  data() { 
    return { 
      message: "Hello Vue 3.0!" 
    }
  } 
}); 
vm.mount('#app');
```

# How to debug vitest test files in VSCode?
Open vscode, click left-bottom settings -> input "launch" -> edit in settings.json.
add a dedicated launch configuration to debug a test file in VSCode.
```
{
  "launch": {
    "configurations": [
      {
        "type": "node",
        "request": "launch",
        "name": "Debug Current Test File",
        "autoAttachChildProcesses": true,
        "skipFiles": ["<node_internals>/**", "**/node_modules/**"],
        "program": "${workspaceRoot}/node_modules/vitest/vitest.mjs",
        "args": ["run", "${relativeFile}"],
        "smartStep": true,
        "console": "integratedTerminal"
      }
    ],
    "compounds": []
  }
}
```
Then in the debug tab (Left Side Menu), ensure 'Debug Current Test File' is selected. 
You can then open the test file you want to debug and press F5 to start debugging.
