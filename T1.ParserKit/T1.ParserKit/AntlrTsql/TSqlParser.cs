//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TSQL.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class TSQLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, SELECT=4, FROM=5, WS=6, ID=7;
	public const int
		RULE_start = 0, RULE_selectStatement = 1, RULE_selectColumnList = 2, RULE_selectColumn = 3, 
		RULE_fromClause = 4, RULE_tableReference = 5;
	public static readonly string[] ruleNames = {
		"start", "selectStatement", "selectColumnList", "selectColumn", "fromClause", 
		"tableReference"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "SELECT", "FROM", "WS", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TSQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TSQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TSQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TSQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(TSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectColumnListContext selectColumnList() {
			return GetRuleContext<SelectColumnListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(TSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_selectStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14;
			Match(SELECT);
			State = 15;
			selectColumnList();
			State = 16;
			Match(FROM);
			State = 17;
			fromClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectColumnListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectColumnContext[] selectColumn() {
			return GetRuleContexts<SelectColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectColumnContext selectColumn(int i) {
			return GetRuleContext<SelectColumnContext>(i);
		}
		public SelectColumnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectColumnList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectColumnList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectColumnList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectColumnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectColumnListContext selectColumnList() {
		SelectColumnListContext _localctx = new SelectColumnListContext(Context, State);
		EnterRule(_localctx, 4, RULE_selectColumnList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			selectColumn();
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 20;
				Match(T__0);
				State = 21;
				selectColumn();
				}
				}
				State = 26;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectColumnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TSQLParser.ID, 0); }
		public SelectColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectColumn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterSelectColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitSelectColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectColumnContext selectColumn() {
		SelectColumnContext _localctx = new SelectColumnContext(Context, State);
		EnterRule(_localctx, 6, RULE_selectColumn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceContext tableReference() {
			return GetRuleContext<TableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(Context, State);
		EnterRule(_localctx, 8, RULE_fromClause);
		try {
			State = 34;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 29;
				tableReference();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 30;
				Match(T__1);
				State = 31;
				selectStatement();
				State = 32;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TSQLParser.ID, 0); }
		public TableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.EnterTableReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITSQLListener typedListener = listener as ITSQLListener;
			if (typedListener != null) typedListener.ExitTableReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITSQLVisitor<TResult> typedVisitor = visitor as ITSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableReferenceContext tableReference() {
		TableReferenceContext _localctx = new TableReferenceContext(Context, State);
		EnterRule(_localctx, 10, RULE_tableReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,7,39,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,1,0,1,0,1,1,1,
		1,1,1,1,1,1,1,1,2,1,2,1,2,5,2,23,8,2,10,2,12,2,26,9,2,1,3,1,3,1,4,1,4,
		1,4,1,4,1,4,3,4,35,8,4,1,5,1,5,1,5,0,0,6,0,2,4,6,8,10,0,0,34,0,12,1,0,
		0,0,2,14,1,0,0,0,4,19,1,0,0,0,6,27,1,0,0,0,8,34,1,0,0,0,10,36,1,0,0,0,
		12,13,3,2,1,0,13,1,1,0,0,0,14,15,5,4,0,0,15,16,3,4,2,0,16,17,5,5,0,0,17,
		18,3,8,4,0,18,3,1,0,0,0,19,24,3,6,3,0,20,21,5,1,0,0,21,23,3,6,3,0,22,20,
		1,0,0,0,23,26,1,0,0,0,24,22,1,0,0,0,24,25,1,0,0,0,25,5,1,0,0,0,26,24,1,
		0,0,0,27,28,5,7,0,0,28,7,1,0,0,0,29,35,3,10,5,0,30,31,5,2,0,0,31,32,3,
		2,1,0,32,33,5,3,0,0,33,35,1,0,0,0,34,29,1,0,0,0,34,30,1,0,0,0,35,9,1,0,
		0,0,36,37,5,7,0,0,37,11,1,0,0,0,2,24,34
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
